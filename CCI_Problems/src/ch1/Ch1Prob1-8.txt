I: If a matrix contains a zero, change all the row and column it belongs in to zeros.
D: Make an algorithm that makes the rows and columns zero without altering future changes.
Sub 1: The array [[1,1,1], [1,0,1], [1,1,1]] would become [[1,0,1], [0,0,0], [1,0,1]]. The array [[0,1,1], [1,1,1], [1,1,0]] would become [[0,0,0], [0,1,0], [0,0,0]].
Sub 2: All zeros would have their respective row and column turn into zero rows and columns. 
Sub 3: If there was a zero, the row and column had to be changed without affecting further changes to be made. 
Sub 4: The array [[1,1,1], [1,0,1], [1,1,1]] would have all of column 1 be changed to zeros, with (0,1) changing to a zero, as well as (2, 1). The array [[1,0,1], [1,0,1], [1,1,1]] would have all or row 0 and 1 turn to zeros, and only column 1 in row 2 changing to a zero.
Sub 5: When translating to code the importance of maintaining the original zeros is the most crucial part. Because of this turning the rows and columns into zeros as you go is impossible as having a Boolean as to whether or not a value was initially zero is needed. As such traversal to find the row and column of all the zeros needed doing first, then changing the values. That done meant more in time complexity but in an additive sense, meaning that from a O(array.shape) perspective the added time complexity was trivial. 
Sub 6: The key test cases as such were those where zeros where in the same row and/or column, as making sure that the overlap didn’t affect the new array was crucial. The array [[1,0,1], [1,0,1], [1,1,1]] covered this case and showed no bugs.
Sub 7: All other test cases were derivations of the original, with differently shaped arrays not posing any problem. The only issue would be jagged arrays, but because the problem specifies that it is an MxN array that wouldn’t be the case. 
L: When dealing with changes to arrays it is crucial to keep in mind how those changes will affect the outcome of a solution down the line. Changing the rows and columns as you traverse the array could be done by putting those values into a new array, but this would lead to confusing and unreadable code, with many nested for loops that could very well be implemented later.  
