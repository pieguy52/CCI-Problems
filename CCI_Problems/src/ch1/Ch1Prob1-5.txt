I: Given two strings write a function to see if the strings are one change away: be it deletion, insertion, or replacement. 
D: The goal is to check if two strings are only one change away. The solution will be a Boolean as to whether or not the strings are indeed only a change away.
  Sub 1: The given examples where pale, ple; pales, pale; pale, bale; and pale, bake. Given these examples it was clear that each one     
  represented whether one of the changes, be it addition, deletion, or replacement. 
  Sub 2: Look at other examples that were accepted versus those that wouldn’t be accepted.
  Sub 3: It became clear that there were two main cases: strings of the same length or of a difference of one. Those that were the same, 
  were being checked for a change in letter, and those that were different were being checked for deletion and addition. 
  Sub 4: With the same examples given, it was possible to trace the examples on their differences and similarities and break them into the according differences. 
  On pale, and ple: P == p, a != l. remove a from string two. Ple == ple. Return true. Pales and pale: p == p, a == a, l == l, e == e, return true, uses the fact that 
  the length is only one longer so its an addition. Pasle and pale: p == p, a = = a, s !=  l, remove s, pale == pale return true. 
  Sub 5: When translating to code there was a split in cases: where the length was the same and where the length was different. Those where the length was the same would allow 
  for only one difference before returning false, and those with different lengths would also split into to. If the appended character was at the end it would be true and returned true,
  if not the first different character would be removed, and the strings would be compared again, and if different return false.
  Sub 6: The first run through resulted in a case where an incorrect string could be accepted. It was caught before testing but would have looked something like pale and pla. 
  The correctness assumed a deletion happened without actually checking whether or not the remaining characters after the first incorrect character were in fact the same as 
  on the other string. 
  Sub 7: With a change to the string builder and deletion of the differing character, the right answer could be returned.  
L: The problem was an easy one to grasp but more difficult to code. Because deletion “shifts” the characters down from where they are in the other word, and incorrect assumption 
about the one to one correspondence could be made, and assume as long as there are less than the length of the strings differences that the characters would have been appropriately 
shifted. That glaring mistake aside by matching up the string length and comparing the words, a true and more correct comparison could be made. 
