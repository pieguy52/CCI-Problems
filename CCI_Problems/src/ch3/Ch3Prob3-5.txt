I: Write an algorithm to sort a stack
D: a method capable of taking a stack and sorting it with only another stack 
	Sub 1: l: 3 > 2 > 1 r: null, l: 2 > 1 r: 3, l: 1 r: 2 > 3, hold 1 l: 2 r: 3, l: 1 > 3 > 2 r: null, l: 3 > 2 r: 1, l: 2 r: 3 > 1, hold 2 l: 3 r: 1, l: 1 > 2 > 3 return l 
	Sub 2: Refer to above, making sure that nothing was left in right is important to ensuring true sorting
	Sub 3: In order to check all of the stack it needs to be emptied, but that makes it possible for elements to be left behind in the temp stack. Moving them back is important
	Sub 4: l: 0 > 3 > 1 > 2 r: null, l: 3 > 1 > 2 r: 0, l: 1 > 2 r: 3 > 0, hold 1 l: 3 > 2 r: 0, hold 3 l: null r: 2 > 1 > 0, l: 3 r: 2 > 1 > 0, l: 2 > 3 r: 1 > 0, l: 1 > 2 > 3 r: 0
	l: 0 > 1 > 2 > 3 r: null return l
	Sub 5: Translation to code same as algorithm
	Sub 6: Pushing 0 to 10, and random pushes
	Sub 7: no debugging necessary
L: When implementing solutions, make sure to check for restrictions as they can offer potential hints in not just what to avoid but also how to approach a problem
